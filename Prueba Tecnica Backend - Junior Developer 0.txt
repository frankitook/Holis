# Backend Technical Test - Junior Developer

## Context

You are part of UBER's backend team. Your task is to develop a functionality that manages the assignment of drivers to passengers based on driver proximity and availability.

## Requirements

Implement a function in JavaScript that assigns the nearest available driver to a passenger requesting a ride.

### Task Description

Create a function called `assignDriver` that takes the following parameters:

- `passengerLocation`: An object containing the passenger's coordinates `{ lat: number, lon: number }`.
  
- `drivers`: An array of objects where each object represents a driver with the following properties:
  - `id`: The driver's unique ID.
  - `location`: An object with the driver's coordinates `{ lat: number, lon: number }`.
  - `available`: A boolean indicating whether the driver is available or not.

Example:

```javascript
const passengerLocation = { lat: 37.7749, lon: -122.4194 };
const drivers = [
  { id: 1, location: { lat: 37.7849, lon: -122.4094 }, available: true },
  { id: 2, location: { lat: 37.7649, lon: -122.4294 }, available: false },
  { id: 3, location: { lat: 37.7749, lon: -122.4094 }, available: true }
];



#Functionality
The function should return the ID of the nearest available driver to the passenger.

If no drivers are available, the function should return null.

#Distance Calculation
To calculate proximity, use the following calculateDistance function:

function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // Radio de la Tierra en km

  const dLat = (lat2 - lat1) * (Math.PI / 180); 
  const dLon = (lon2 - lon1) * (Math.PI / 180); 

  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); 

  return R * c; 
} 



#Considerations
-Coordinates are in decimal format and represent latitude and longitude in degrees.

-Optimize your code for clarity and efficiency, but simplicity and correctness are the most important aspects of this exercise.
